diff --git a/src/luarocks/search.lua b/src/luarocks/search.lua
index d22c2a1..eb63e2f 100644
--- a/src/luarocks/search.lua
+++ b/src/luarocks/search.lua
@@ -449,26 +449,54 @@ function search.pick_installed_rock(name, version, given_tree)
    return name, version, repo, repo_url
 end
 
+
 --- Driver function for "search" command.
+-- @param flags table: table of flags passed to the search.
 -- @param name string: A substring of a rock name to search.
 -- @param version string or nil: a version may also be passed.
 -- @return boolean or (nil, string): True if build was successful; nil and an
 -- error message otherwise.
-function search.command(flags, name, version)
+local function get_results(flags, name, version)
    if flags["all"] then
       name, version = "", nil
    end
-
    if type(name) ~= "string" and not flags["all"] then
       return nil, "Enter name and version or use --all. "..util.see_help("search")
    end
    
    local query = search.make_query(name:lower(), version)
    query.exact_name = false
-   local results, err = search.search_repos(query)
+   local results, err = search.search_repos(query)      
+   return split_source_and_binary_results(results)    
+end
+
+---Called from lua to execute a search
+-- @param vararg table: expects to parse: flags, name, version
+-- @returns table,table,table,string,string: source package results, 
+--	binary package results, filter list, name requested, version. 
+--	If error returns nil, string, table, string, string: nil, 
+--	error message, filters, name, version
+function search.search(flags, name, version) --(...)
+  --local flags, name, version = util.parse_flags(...)
+  local sources, binaries = get_results(flags, name, version)
+  
+--   if sources == nil and binaries == nil then
+--     sources = {}
+--     binaries = {}
+--   end
+  return sources, binaries, flags, name, version
+end
+
+---Called from the command line tool to execute a search
+-- @param flags table: table of flags passed to the search.
+-- @param name string: A substring of a rock name to search.
+-- @param version string or nil: a version may also be passed.
+-- @return boolean or (nil, string): True if build was successful; nil and an
+-- error message otherwise.
+function search.command(flags, name, version)
    local porcelain = flags["porcelain"]
    util.title("Search results:", porcelain, "=")
-   local sources, binaries = split_source_and_binary_results(results)
+   local sources, binaries = get_results(flags, name, version)
    if next(sources) and not flags["binary"] then
       util.title("Rockspecs and source rocks:", porcelain)
       search.print_results(sources, porcelain)
