diff --git a/src/luarocks/list.lua b/src/luarocks/list.lua
index c65e058..a2e9664 100644
--- a/src/luarocks/list.lua
+++ b/src/luarocks/list.lua
@@ -1,9 +1,14 @@
 
 --- Module implementing the LuaRocks "list" command.
 -- Lists currently installed rocks.
+-- module("luarocks.list", package.seeall)
+
 local list = {}
 package.loaded["luarocks.list"] = list
+  
+local flags, filter, version, query, trees
 
+--util.add_run_function(list)
 local search = require("luarocks.search")
 local deps = require("luarocks.deps")
 local cfg = require("luarocks.cfg")
@@ -22,7 +27,9 @@ list.help = [[
 --porcelain   Produce machine-friendly output.
 ]]
 
-local function check_outdated(trees, query)
+---Searches for outdated packages in the given tree
+-- @return table,table,table,string: results, trees, flags, version
+local function get_outdated()
    local results_installed = {}
    for _, tree in ipairs(trees) do
       search.manifest_search(results_installed, path.rocks_dir(tree), query)
@@ -48,12 +55,14 @@ local function check_outdated(trees, query)
          end
       end
    end
-   return outdated
+   return outdated, trees, flags, version
 end
 
-local function list_outdated(trees, query, porcelain)
+--- Outputs the outdated packages
+-- @return true
+local function print_outdated(porcelain)
    util.title("Outdated rocks:", porcelain)
-   local outdated = check_outdated(trees, query)
+   local outdated = get_outdated()
    for _, item in ipairs(outdated) do
       if porcelain then
          util.printout(item.name, item.installed, item.available, item.repo)
@@ -69,19 +78,9 @@ end
 --- Driver function for "list" command.
 -- @param filter string or nil: A substring of a rock name to filter by.
 -- @param version string or nil: a version may also be passed.
--- @return boolean: True if succeeded, nil on errors.
-function list.command(flags, filter, version)
-   local query = search.make_query(filter and filter:lower() or "", version)
-   query.exact_name = false
-   local trees = cfg.rocks_trees
-   if flags["tree"] then
-      trees = { flags["tree"] }
-   end
-   
-   if flags["outdated"] then
-      return list_outdated(trees, query, flags["porcelain"])
-   end
-   
+-- @return table,table,table,string: results, trees, flags, version
+local function get_results()
+      
    local results = {}
    for _, tree in ipairs(trees) do
       local ok, err, errcode = search.manifest_search(results, path.rocks_dir(tree), query)
@@ -89,9 +88,54 @@ function list.command(flags, filter, version)
          util.warning(err)
       end
    end
-   util.title("Installed rocks:", flags["porcelain"])
-   search.print_results(results, flags["porcelain"])
+   return results, trees, flags, version 
+end
+
+--- Parse the arguments, create the query and get the trees. 
+local function init()
+   query = search.make_query(filter and filter:lower() or "", version)
+   query.exact_name = false
+   trees = cfg.rocks_trees
+   if flags["tree"] then
+      trees = { flags["tree"] }
+   end
+end
+
+--- Run function for "list" command. This is called by command_line  
+-- when the user specifies `list`.
+-- @param filter string or nil: A substring of a rock name to filter by.
+-- @param version string or nil: a version may also be passed.
+-- @return true
+function list.command(flags_in, filter_in, version_in)
+    --flags, filter, version = table.unpack(...)  
+  flags = flags_in
+  filter = filter_in
+  version = version_in
+   init() 
+   if flags["outdated"] then
+      print_outdated(flags["porcelain"])
+   else
+      util.title("Installed rocks:", flags["porcelain"])
+      search.print_results(get_results(), flags["porcelain"])
+   end
+   
    return true
 end
 
+-- Return the table results from the list command
+-- @return table,table,table,string: results, trees, flags, version
+function list.list(flags_in, filter_in, version_in)
+    --flags, filter, version = table.unpack(...)  
+  flags = flags_in
+  filter = filter_in
+  version = version_in
+   --flags, filter, version = util.parse_flags(...)
+   init()
+  if flags["outdated"] then
+    return get_outdated()
+  else
+    return get_results()
+  end
+end
+
 return list
diff --git a/src/luarocks/search.lua b/src/luarocks/search.lua
index d22c2a1..eb63e2f 100644
--- a/src/luarocks/search.lua
+++ b/src/luarocks/search.lua
@@ -449,26 +449,54 @@ function search.pick_installed_rock(name, version, given_tree)
    return name, version, repo, repo_url
 end
 
+
 --- Driver function for "search" command.
+-- @param flags table: table of flags passed to the search.
 -- @param name string: A substring of a rock name to search.
 -- @param version string or nil: a version may also be passed.
 -- @return boolean or (nil, string): True if build was successful; nil and an
 -- error message otherwise.
-function search.command(flags, name, version)
+local function get_results(flags, name, version)
    if flags["all"] then
       name, version = "", nil
    end
-
    if type(name) ~= "string" and not flags["all"] then
       return nil, "Enter name and version or use --all. "..util.see_help("search")
    end
    
    local query = search.make_query(name:lower(), version)
    query.exact_name = false
-   local results, err = search.search_repos(query)
+   local results, err = search.search_repos(query)      
+   return split_source_and_binary_results(results)    
+end
+
+---Called from lua to execute a search
+-- @param vararg table: expects to parse: flags, name, version
+-- @returns table,table,table,string,string: source package results, 
+--	binary package results, filter list, name requested, version. 
+--	If error returns nil, string, table, string, string: nil, 
+--	error message, filters, name, version
+function search.search(flags, name, version) --(...)
+  --local flags, name, version = util.parse_flags(...)
+  local sources, binaries = get_results(flags, name, version)
+  
+--   if sources == nil and binaries == nil then
+--     sources = {}
+--     binaries = {}
+--   end
+  return sources, binaries, flags, name, version
+end
+
+---Called from the command line tool to execute a search
+-- @param flags table: table of flags passed to the search.
+-- @param name string: A substring of a rock name to search.
+-- @param version string or nil: a version may also be passed.
+-- @return boolean or (nil, string): True if build was successful; nil and an
+-- error message otherwise.
+function search.command(flags, name, version)
    local porcelain = flags["porcelain"]
    util.title("Search results:", porcelain, "=")
-   local sources, binaries = split_source_and_binary_results(results)
+   local sources, binaries = get_results(flags, name, version)
    if next(sources) and not flags["binary"] then
       util.title("Rockspecs and source rocks:", porcelain)
       search.print_results(sources, porcelain)
diff --git a/src/luarocks/search.lua b/src/luarocks/search.lua
index d22c2a1..eb63e2f 100644
--- a/src/luarocks/search.lua
+++ b/src/luarocks/search.lua
@@ -449,26 +449,54 @@ function search.pick_installed_rock(name, version, given_tree)
    return name, version, repo, repo_url
 end
 
+
 --- Driver function for "search" command.
+-- @param flags table: table of flags passed to the search.
 -- @param name string: A substring of a rock name to search.
 -- @param version string or nil: a version may also be passed.
 -- @return boolean or (nil, string): True if build was successful; nil and an
 -- error message otherwise.
-function search.command(flags, name, version)
+local function get_results(flags, name, version)
    if flags["all"] then
       name, version = "", nil
    end
-
    if type(name) ~= "string" and not flags["all"] then
       return nil, "Enter name and version or use --all. "..util.see_help("search")
    end
    
    local query = search.make_query(name:lower(), version)
    query.exact_name = false
-   local results, err = search.search_repos(query)
+   local results, err = search.search_repos(query)      
+   return split_source_and_binary_results(results)    
+end
+
+---Called from lua to execute a search
+-- @param vararg table: expects to parse: flags, name, version
+-- @returns table,table,table,string,string: source package results, 
+--	binary package results, filter list, name requested, version. 
+--	If error returns nil, string, table, string, string: nil, 
+--	error message, filters, name, version
+function search.search(flags, name, version) --(...)
+  --local flags, name, version = util.parse_flags(...)
+  local sources, binaries = get_results(flags, name, version)
+  
+--   if sources == nil and binaries == nil then
+--     sources = {}
+--     binaries = {}
+--   end
+  return sources, binaries, flags, name, version
+end
+
+---Called from the command line tool to execute a search
+-- @param flags table: table of flags passed to the search.
+-- @param name string: A substring of a rock name to search.
+-- @param version string or nil: a version may also be passed.
+-- @return boolean or (nil, string): True if build was successful; nil and an
+-- error message otherwise.
+function search.command(flags, name, version)
    local porcelain = flags["porcelain"]
    util.title("Search results:", porcelain, "=")
-   local sources, binaries = split_source_and_binary_results(results)
+   local sources, binaries = get_results(flags, name, version)
    if next(sources) and not flags["binary"] then
       util.title("Rockspecs and source rocks:", porcelain)
       search.print_results(sources, porcelain)
